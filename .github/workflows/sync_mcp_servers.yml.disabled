# .github/workflows/sync_mcp_servers.yml

name: Sync MCP Servers (同步 MCP 服务器列表)

on:
  push:
    branches:
      - main # 当 main 分支有推送时触发
  schedule:
    - cron: '0 0 * * *' # 每天 UTC 时间 0 点定时触发 (北京时间早上8点)

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (签出代码)
        uses: actions/checkout@v3
        with:
          # 使用 PAT 检出，以便后续可以推送更改
          # 需要在仓库的 Secrets 中配置名为 PAT 的 Personal Access Token
          token: ${{ secrets.PAT }}
          # 如果仓库本身包含子模块，并且你也想更新它们，可能需要设置 submodules: true
          # submodules: true # 在这个场景下不需要，因为我们是手动"同步"内容

      - name: Set up Git (设置 Git 配置)
        run: |
          git config user.name "GitHub Actions Bot"
          # 使用 GitHub Actions 提供的默认邮箱地址
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Sync modelcontextprotocol/servers (同步 modelcontextprotocol/servers)
        run: |
          TARGET_DIR="@modelcontextprotocol/servers" # 定义目标目录变量
          echo "同步 modelcontextprotocol/servers 到 $TARGET_DIR"
          # 删除旧目录（如果存在），避免冲突
          rm -rf "$TARGET_DIR"
          # 创建父目录，确保 @modelcontextprotocol 存在
          mkdir -p "$(dirname "$TARGET_DIR")"
          # 克隆最新代码 (只克隆最后一次提交，加快速度)
          git clone --depth 1 https://github.com/modelcontextprotocol/servers.git "$TARGET_DIR"
          # !!! 关键步骤：删除克隆下来的仓库的 .git 目录 !!!
          # 这样 git add 添加的就是文件内容，而不是子模块引用
          rm -rf "$TARGET_DIR/.git"
          # 添加新克隆的内容到暂存区
          git add "$TARGET_DIR"
          # 提交更改（如果 git add 确实添加了新内容或更改）
          # 使用 || echo "..." 避免在没有更改时报错退出
          git commit -m "chore: 同步 modelcontextprotocol/servers 仓库内容到 $TARGET_DIR" || echo "无需提交：modelcontextprotocol/servers 没有变化"

      - name: Sync punkpeye/awesome-mcp-servers (同步 punkpeye/awesome-mcp-servers)
        run: |
          TARGET_DIR="@punkpeye/awesome-mcp-servers"
          echo "同步 punkpeye/awesome-mcp-servers 到 $TARGET_DIR"
          rm -rf "$TARGET_DIR"
          mkdir -p "$(dirname "$TARGET_DIR")"
          git clone --depth 1 https://github.com/punkpeye/awesome-mcp-servers.git "$TARGET_DIR"
          # 删除克隆仓库的 .git 目录
          rm -rf "$TARGET_DIR/.git"
          git add "$TARGET_DIR"
          git commit -m "chore: 同步 punkpeye/awesome-mcp-servers 仓库内容到 $TARGET_DIR" || echo "无需提交：punkpeye/awesome-mcp-servers 没有变化"

      - name: Sync wong2/awesome-mcp-servers (同步 wong2/awesome-mcp-servers)
        run: |
          TARGET_DIR="@wong2/awesome-mcp-servers"
          echo "同步 wong2/awesome-mcp-servers 到 $TARGET_DIR"
          rm -rf "$TARGET_DIR"
          mkdir -p "$(dirname "$TARGET_DIR")"
          git clone --depth 1 https://github.com/wong2/awesome-mcp-servers.git "$TARGET_DIR"
          # 删除克隆仓库的 .git 目录
          rm -rf "$TARGET_DIR/.git"
          git add "$TARGET_DIR"
          git commit -m "chore: 同步 wong2/awesome-mcp-servers 仓库内容到 $TARGET_DIR" || echo "无需提交：wong2/awesome-mcp-servers 没有变化"

      - name: Sync appcypher/awesome-mcp-servers (同步 appcypher/awesome-mcp-servers)
        run: |
          TARGET_DIR="@appcypher/awesome-mcp-servers"
          echo "同步 appcypher/awesome-mcp-servers 到 $TARGET_DIR"
          rm -rf "$TARGET_DIR"
          mkdir -p "$(dirname "$TARGET_DIR")"
          git clone --depth 1 https://github.com/appcypher/awesome-mcp-servers.git "$TARGET_DIR"
          # 删除克隆仓库的 .git 目录
          rm -rf "$TARGET_DIR/.git"
          git add "$TARGET_DIR"
          git commit -m "chore: 同步 appcypher/awesome-mcp-servers 仓库内容到 $TARGET_DIR" || echo "无需提交：appcypher/awesome-mcp-servers 没有变化"

      - name: Git Push (推送更改)
        run: |
          # 检查是否有待推送的提交 (可选，但更健壮)
          # git diff --quiet HEAD^ HEAD || git push origin HEAD:${{ github.ref_name }}
          # 或者简单地尝试推送，如果没变化，push 命令本身通常也不会做任何事或报错（取决于 Git 版本和配置）

          # 确保远程 URL 配置正确，包含 PAT 以进行认证
          git remote set-url origin https://x-access-token:${{ secrets.PAT }}@github.com/${{ github.repository }}.git
          # 推送到当前触发工作流的分支 (通常是 main)
          # HEAD 指向当前的 commit，${{ github.ref_name }} 是当前分支名
          git push origin HEAD:${{ github.ref_name }}
        # 可以添加条件，仅在有提交时才推送，但这需要更复杂的逻辑来跟踪是否有 commit 成功
        # 依赖于 commit 步骤中的 || echo ... 已经能处理大部分情况，push 失败会显示在日志中
